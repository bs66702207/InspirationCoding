strings_handle:

count-substr-in-mainstr-number.c 
计算字符串中字串的个数, 思路: 利用strstr循环进行查找， 并且统计个数。

insert-continuous-num.c 
找找字符串中连续字母的个数， 并且将个数分别插入到连续字母的后面, AABCC -> AA2BCC2, 思路: 分两步走，第一步是一个循环中打印出字母连续的数字; 
第二步是在这个循环中，截取出连续字母/独立字母的字符串，如果是连续字母字符串，用strcat接上数字，如果是独立的字母就不接上数字，然后从头到尾巴拼接起来。

design_mode:

1.single_demo:
最简单的单例设计模式，两种实现方式，.h和.cpp; 纯.cpp

sortings:
quick_sort.c
http://blog.csdn.net/guoyong10721073/article/details/8025201
快速排序的基本思想是：
通过一躺排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按次方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。
假设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用第一个数据）作为关键数据(key)，然后将所有比它的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一躺快速排序。一躺快速排序的算法是：
1）设置两个变量i、j，排序开始的时候i：=1，j：= N； 
2）以第一个数组元素作为关键数据，赋值给X，即X：=A[0]； 
3）从J开始向前搜索，即由后开始向前搜索（J：=J-1），找到第一个小于X的值，两者交换； 
4）从I开始向后搜索，即由前开始向后搜索（I：=I+1），找到第一个大于X的值，两者交换； 
5）重复第3、4步，直到i=j (while i == j)； 
